package com.jdbc.pool;

import com.jdbc.util.DBConfigReader;

import java.sql.*;

/**
 * 连接代理类，持有真实的连接对象Connection
 * 加载驱动
 */
public class ConnectionProxy extends ConnectionAdapter {

    private int index;
    // 存放真实的连接用于获取PrepareStatement
    private Connection connection;

    private static String driver = DBConfigReader.getConfig("driver");
    private static String url = DBConfigReader.getConfig("url");
    private static String user = DBConfigReader.getConfig("user");
    private static String pass = DBConfigReader.getConfig("pass");

    // 将一个真实的连接和一个序号绑定在一起
    public ConnectionProxy(int index) {
        this.index = index;
    }

    static {
        try {
            Class.forName(driver);
            // System.setProperty("jdbc.driver", driver);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    {
        try {
            connection = DriverManager.getConnection(url, user, pass);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public int getIndex() {
        return index;
    }

    public void setIndex(int index) {
        this.index = index;
    }

    public Connection getConnection() {
        return connection;
    }


    private void initEntityTalbe() {

    }

    /**
     * 常用方法找适配器实现
     */

    @Override
    public Statement createStatement() throws SQLException {
        return connection.createStatement();
    }


    /**
     * 6个prepareStatement都实现，避免调用出错。
     */
    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return connection.prepareStatement(sql);
    }
    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return connection.prepareStatement(sql, autoGeneratedKeys);
    }
    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return connection.prepareStatement(sql, columnIndexes);
    }
    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return connection.prepareStatement(sql, columnNames);
    }
    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }
    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }
    /**
     * 6个prepareStatement都实现，避免调用出错。
     */

    @Override
    public void close() {
        // 不能真正的关闭，只能偷偷地释放
        ConnectionPool.giveBack(this);
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return connection.getMetaData();
    }

}
